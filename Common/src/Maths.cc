/**
 * @file    Maths.cc
 * @brief   Simple concrete type math functions
 * @author  [Yi-Mu "Enoch" Chen](https://github.com/yimuchen)
 */
#include <algorithm>
#include <cmath>
#include <cstdint>
#include <numeric>
#include <vector>

namespace usr {

/**
 * @brief Reducing the double x to it's mantissa component in it's scientific
 *        notation, returns the exponent.
 */
int
ReduceToMant( double& x )
{
  int ans = 0;
  if( x == 0 ){ return 0; }

  while( fabs( x ) > 10 ){
    ans++;
    x /= 10;
  }

  while( fabs( x ) < 0.1 ){
    ans--;
    x *= 10;
  }

  return ans;
}

/**
 * @brief returning the exponent for the scientific notation of a double x
 */
int
GetExponent( double x )
{
  return ReduceToMant( x );
}

/**
 * @brief faster implementation of the power function with integers
 *
 * This actually has minimal uses in analysis, I just thought it was a nice
 * exercise for writting a [square-and-multiply algorithm](https://en.wikipedia.org/wiki/Exponentiation_by_squaring) :/
 */
double
IntPower( double base, int exp )
{
  if( exp < 0 ){ return IntPower( 1./base, -exp ); }
  double ans = 1;


  for( int x = 1; x; x <<= 1, base *= base ){
    if( x & exp ){ ans *= base; }
  }

  return ans;
}

/**
 * @brief Rounding up to the closest power of 2
 *
 * Using a nice algorithm by bit mashing.
 * https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2
 */
unsigned
RoundUpToP2( unsigned x )
{
  x--;
  x |= x >> 1;
  x |= x >> 2;
  x |= x >> 4;
  x |= x >> 8;
  x |= x >> 16;
  x++;
  return x;
}

/**
 * @brief A 64-bit pseudo random number generated by a double.
 *
 * This is useful when attempting to hash parameter space to avoid excessive
 * re-calculation, or to generate random values based on the independent
 * variables to allow for unique smearing. We are basing the algorithm on the
 * [xorshift algorithm](https://en.wikipedia.org/wiki/Xorshift) for
 * randomization.
 */
uint64_t
HashValue( const double in )
{
  union bitconvert
  {
    uint64_t bits;
    double   input;
  };

  bitconvert conv;
  conv.input = in;
  uint64_t x = conv.bits;
  x ^= x >> 12;// a
  x ^= x << 25;// b
  x ^= x >> 27;// c
  return x * 0x2545F4914F6CDD1D;
}

/**
 * @brief A 32-bit pseudo random number generated by a double
 *
 * This is useful when attempting to hash parameter space to avoid excessive
 * re-calculation, or to generate random values based on the independent
 * variables to allow for unique smearing. Notice that the algorithm generates
 * the 32 bit number by first truncating the double into a 32 bit float, so that
 * mathematically close value can be mapped to the same has value. The actually
 * randomization algorithm is based on the [xorshift
 * algorithm](https://en.wikipedia.org/wiki/Xorshift).
 */
uint32_t
HashValue32( const double in )
{
  union bitconvert
  {
    uint32_t bits;
    float    input;
  };

  const float trunc = in;
  bitconvert conv;
  conv.input = trunc;
  uint32_t x = conv.bits;

  x ^= x << 13;
  x ^= x >> 17;
  x ^= x << 5;
  return x;
}

/**
 * @brief Calculating the mean of a double vector
 *
 * Simple vector arithmetics using the std::algorithm methods
 */
double
Mean( const std::vector<double>& vec )
{
  return std::accumulate( vec.begin(), vec.end(), 0.0 ) / (double)vec.size();
}

/**
 * @brief Calculating the standard deviation of a double vector
 *
 * Simple vector arithmetics using the std::algorithm methods
 */
double
StdDev( const std::vector<double>& vec )
{
  const double mean = Mean( vec );
  std::vector<double> diff( vec.size() );

  std::transform( vec.begin(), vec.end(), diff.begin(),
    [mean]( const double x ){
      return x-mean;
    } );
  const double sq = std::inner_product( diff.begin(), diff.end(), diff.begin(), 0.0 );

  return std::sqrt( sq/vec.size() );
}

/**
 * @brief Rounding to closest multiple of target number
 *
 * The return value will be a multiple of the target number that is closest to
 * the original input.
 */
double
RoundTo( const double x, const double target )
{
  return target * std::round( x / target );
}

/**
 * @brief Rounding up to the closest multiple of target number
 *
 * The return value will be the minimal multiple of the target number that is
 * greater than the input x.
 */
double
RoundUp( const double x, const double target )
{
  return target * std::ceil( x/target );
}

/**
 * @brief Rounding down to the closest multiple of the target number.
 *
 * The return value will be the maximum multiple of the target number that is
 * smaller than the input x.
 */
double
RoundDown( const double x, const double target )
{
  return target * std::floor( x/target );
}

}/* usr */
